Разместить в динамической памяти 2 массива – 2 матрицы размерностью n на n с элементами типа double (значения n и элементы массивов ввести с консоли). 
А также ввести с консоли знак операции: '+', '-' или '*'. 
Написать функцию, вычисляющую сумму, разность или произведение данных матриц (их передать по указателю) и возвращающую указатель на массив-результат. 
Разместить эту функцию в отдельном модуле (отличном от того, где располагается функция main()). 
Выдать на консоль значения полученного вектора.

malloc-предназначена для выделения непрерывной обдасти памяти заданного размера. Функция возвращает указатель без типа. Выделяет память длиной в s байт и возвращает указатель на начало выделенной памяти. В случае неудачного выполнения возвращает NULL
double*-означает указатель на двойную переменную
free()-освобождение памяти 

void- функция не возвращает значение. Это означает, что функция выполняет определенные действия, но не возвращает никакого результата (т.е. не возвращает никакого значения, как тип данных).

main.c 
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include "mylib.h"

int main() {
    int n;
    printf("Введите размерность матрицы: ");
    scanf("%d", &n);

    double* m1 = (double*)malloc(n * n * sizeof(double));  // Выделение памяти под указатели на строки
    double* m2 = (double*)malloc(n * n * sizeof(double));

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("m1[%d][%d] = ", i + 1, j + 1);
            scanf("%lf", &m1[i * n + j]);
        }
    }

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", m1[i * n + j]);
        }
        printf("\n");
    }

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("m2[%d][%d] = ", i + 1, j + 1);
            scanf("%lf", &m2[i * n + j]);
        }
    }

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", massive_2[i * n + j]);
        }
        printf("\n");
    }

    char math;
    printf("Введите операцию +, -, *: ");
    scanf(" %c", &math); //%c интерпретирует его числовое значение как символьное значение для отображения. 

    double* massives = f(massive_1, massive_2, n, math);

    for(int i = 0; i < n; i++) 
    {

        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", massives[i * n + j]);
        }
        printf("\n");
    }

    free(massive_1);
    free(massive_2);
    free(massives);

    return 0;
}



mylib.h
double** f(double **massive_1, double **massive_2, int n, char math);

mylib.c
#include "mylib.h"
#include <malloc.h>

double* f(double* massive_1, double* massive_2, int n, char math) 
{
    double* massives = (double*)malloc(n * n * sizeof(double));

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            if(math == '+') 
            {
                massives[i * n + j] = massive_1[i * n + j] + massive_2[i * n + j];
            } 
            else if(math == '-') 
            {
                massives[i * n + j] = massive_1[i * n + j] - massive_2[i * n + j];
            } 
            else if(math == '*') 
            {
                massives[i * n + j] = massive_1[i * n + j] * massive_2[i * n + j];
            }
        }
    }

    return massives;
}

Двумерный массив:
main.c

#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"

int main() {
    int n;
    printf("Введите размерность матрицы: ");
    scanf("%d", &n);

    double** m1;
    double** m2;
    int i,j;

   m1 = (double**)malloc(n*sizeof(double*));
   for (int i=0; i<n;i++)
   {
       m1[i]=(double*)malloc(n*sizeof(double));
   }
   
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("m1[%d][%d]=", i+1,j+1);
           scanf("%lf", &m1[i][j]);
       }
   }
   
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("%lf", m1[i][j]);
       }
       printf("\n");
   }
   
   massive_2=(double**)malloc(n*sizeof(double*));
   
   for(int i=0;i<n;i++)
   {
       m2[i]=(double*)malloc(n * sizeof(double)); 
   }
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("m2[%d][%d]=", i+1,j+1);
           scanf("%lf", &m2[i][j]);
       }
   }
   
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("%lf", m2[i][j]);
       }
       printf("\n");
   }
   
    char math;
    printf("Введите операцию +, -, *: ");
    scanf(" %c", &math); //%c интерпретирует его числовое значение как символьное значение для отображения. 

    double **massives = f(m1, m2, n, math);

    for(int i = 0; i < n; i++) 
    {

        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", massives[i][j]);
        }
        printf("\n");
    }
    for(i=0;i<n;i++)
    {
        free(m1[i]);
    }
    for(i=0;i<n;i++)
    {
        free(m2[i]);
    }
    for(i=0;i<n;i++)
    {
        free(massives[i]);
    }
    free(m1);
    free(m2);
    free(massives);

    return 0;
}


mylib.h
double* f(double **m1, double **m2, int n, char math);

mylib.c

#include <stdlib.h>
#include <malloc.h>
#include "mylib.h"

double **f(double **m1, double **m2, int n, char math) 
{
    double **massives = (double**)malloc(n * sizeof(double*));

    for(int i = 0; i < n; i++) 
    {
        massives[i]= (double*)malloc(n*sizeof(double));
    }
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++) 
        {
            if(math == '+') 
            {
                massives[i][j] = m1[i][j] + m2[i][j];
            } 
            else if(math == '-') 
            {
                massives[i][j] = m1[i][j] - m2[i][j];
            } 
            else if(math == '*') 
            {
                massives[i][j] = m1[i][j] * m2[i][j];
            }
        }
    }

    return massives;
}


Начало для введения функции printmatrix: 

#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"


int main() {
    int n;
    printf("Введите размерность матрицы: ");
    scanf("%d", &n);

    double** massive_1;
    double** massive_2;
    int i,j;


   massive_1 = (double**)malloc(n*sizeof(double*));
   for (int i=0; i<n;i++)
   {
       for (int j=0;j<n;j++)
       massive_1[i]=(double*)malloc(n*sizeof(double));
   }
      massive_2 = (double**)malloc(n*sizeof(double*));
   for (int i=0; i<n;i++)
   {
       for (int j=0;j<n;j++)
       massive_2[i]=(double*)malloc(n*sizeof(double));
   }  

   for(int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("%lf", massive_2[i][j]);
       }
       printf("\n");
   }
   printf("Матрица 1: \n");
   printmatrix(n,massive_1);
   printf("Матрица 2: \n");
   printmatrix(n,massive_2);
   
   printf("Print massive1: \n");
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++){
            printf("%d", massive_1[i][j]); 
       }
       printf("\n"); 
    printf("Print massive2: \n); 
    int printmatrix(n,massive_2);   
       
    char math;
    printf("Введите операцию +, -, *: ");
    scanf(" %c", &math); 

    double **massives = f(massive_1, massive_2, n, math);

    for(int i = 0; i < n; i++) 
    {

        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", massives[i][j]);
        }
        printf("\n");
    }
    for(i=0;i<n;i++)
    {
        free(massive_1[i]);
    }
    for(i=0;i<n;i++)
    {
        free(massive_2[i]);
    }
    for(i=0;i<n;i++)
    {
        free(massives[i]);
    }
    free(massive_1);
    free(massive_2);
    free(massives);

    return 0;
}
