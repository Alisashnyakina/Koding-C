Разместить в динамической памяти 2 массива – 2 матрицы размерностью n на n с элементами типа double (значения n и элементы массивов ввести с консоли). 
А также ввести с консоли знак операции: '+', '-' или '*'. 
Написать функцию, вычисляющую сумму, разность или произведение данных матриц (их передать по указателю) и возвращающую указатель на массив-результат. 
Разместить эту функцию в отдельном модуле (отличном от того, где располагается функция main()). 
Выдать на консоль значения полученного вектора.

malloc-предназначена для выделения непрерывной обдасти памяти заданного размера. Функция возвращает указатель без типа. Выделяет память длиной в s байт и возвращает указатель на начало выделенной памяти. В случае неудачного выполнения возвращает NULL
double*-означает указатель на двойную переменную
free()-освобождение памяти 
void- функция не возвращает значение. Это означает, что функция выполняет определенные действия, но не возвращает никакого результата (т.е. не возвращает никакого значения, как тип данных).







main.c 
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include "mylib.h"

int main() {
    int n;
    printf("Введите размерность матрицы: ");
    scanf("%d", &n);

    double* m1 = (double*)malloc(n * n * sizeof(double));  // Выделение памяти под указатели на строки
    double* m2 = (double*)malloc(n * n * sizeof(double));

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("m1[%d][%d] = ", i + 1, j + 1);
            scanf("%lf", &m1[i * n + j]);
        }
    }

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", m1[i * n + j]);
        }
        printf("\n");
    }

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("m2[%d][%d] = ", i + 1, j + 1);
            scanf("%lf", &m2[i * n + j]);
        }
    }

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", massive_2[i * n + j]);
        }
        printf("\n");
    }

    char math;
    printf("Введите операцию +, -, *: ");
    scanf(" %c", &math); //%c интерпретирует его числовое значение как символьное значение для отображения. 

    double* massives = f(massive_1, massive_2, n, math);

    for(int i = 0; i < n; i++) 
    {

        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", massives[i * n + j]);
        }
        printf("\n");
    }

    free(massive_1);
    free(massive_2);
    free(massives);

    return 0;
}



mylib.h
double** f(double **massive_1, double **massive_2, int n, char math);

mylib.c
#include "mylib.h"
#include <malloc.h>

double* f(double* massive_1, double* massive_2, int n, char math) 
{
    double* massives = (double*)malloc(n * n * sizeof(double));

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            if(math == '+') 
            {
                massives[i * n + j] = massive_1[i * n + j] + massive_2[i * n + j];
            } 
            else if(math == '-') 
            {
                massives[i * n + j] = massive_1[i * n + j] - massive_2[i * n + j];
            } 
            else if(math == '*') 
            {
                massives[i * n + j] = massive_1[i * n + j] * massive_2[i * n + j];
            }
        }
    }

    return massives;
}

Двумерный массив:
main.c

#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"

int main() {
    int n;
    printf("Введите размерность матрицы: ");
    scanf("%d", &n);

    double** m1;
    double** m2;
    int i,j;

   m1 = (double**)malloc(n*sizeof(double*));
   for (int i=0; i<n;i++)
   {
       m1[i]=(double*)malloc(n*sizeof(double));
   }
   
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("m1[%d][%d]=", i+1,j+1);
           scanf("%lf", &m1[i][j]);
       }
   }
   
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("%lf", m1[i][j]);
       }
       printf("\n");
   }
   
   m2=(double**)malloc(n*sizeof(double*));
   
   for(int i=0;i<n;i++)
   {
       m2[i]=(double*)malloc(n * sizeof(double)); 
   }
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("m2[%d][%d]=", i+1,j+1);
           scanf("%lf", &m2[i][j]);
       }
   }
   
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("%lf", m2[i][j]);
       }
       printf("\n");
   }
   
    char math;
    printf("Введите операцию +, -, *: ");
    scanf(" %c", &math); //%c интерпретирует его числовое значение как символьное значение для отображения. 

    double **m3 = f(m1, m2, n, math);

    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            printf("%lf ", m3[i][j]);
        }
        printf("\n");
    }
    for(i=0;i<n;i++)
    {
        free(m1[i]);
    }
    for(i=0;i<n;i++)
    {
        free(m2[i]);
    }
    for(i=0;i<n;i++)
    {
        free(m3[i]);
    }
    free(m1);
    free(m2);
    free(m3);

    return 0;
}


mylib.h
double **f(double **m1, double **m2, int n, char math);

mylib.c

#include <stdlib.h>
#include <malloc.h>
#include "mylib.h"

double **f(double **m1, double **m2, int n, char math) 
{
    double **m3 = (double**)malloc(n * sizeof(double*));

    for(int i = 0; i < n; i++) 
    {
        m3[i]= (double*)malloc(n*sizeof(double));
    }
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++) 
        {
            if(math == '+') 
            {
                m3[i][j] = m1[i][j] + m2[i][j];
            } 
            else if(math == '-') 
            {
                m3[i][j] = m1[i][j] - m2[i][j];
            } 
            else if(math == '*') 
            {
               m3[i][j] = 0;
                for (int k = 0; k < n; k++) {
                    m3[i][j] += m1[i][k] * m2[k][j];
            }
        }
    }

    return m3;
    }
 }


ФУНКЦИЯ printmatrix: 
main.c

#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"

void printmatrix(double** matrix, int n)
{
    for (int i=0;i<n;i++)
    {
        for (int j=0;j<n;j++)
        {
            printf("%lf", matrix[i][j]);
        }
        pfintf("\n");
    }
}


int main() {
    int n;
    printf("Введите размерность матрицы: ");
    scanf("%d", &n);

    double** m1;
    double** m2;
    int i,j;

   m1 = (double**)malloc(n*sizeof(double*));
   for (int i=0; i<n;i++)
   {
       m1[i]=(double*)malloc(n*sizeof(double));
   }
   
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("m1[%d][%d]=", i+1,j+1);
           scanf("%lf", &m1[i][j]);
       }
   }
   
   printmatrix(m1,n);
   
   m2=(double**)malloc(n*sizeof(double*));
   
   for(int i=0;i<n;i++)
   {
       m2[i]=(double*)malloc(n * sizeof(double)); 
   }
   for (int i=0;i<n;i++)
   {
       for (int j=0;j<n;j++)
       {
           printf("m2[%d][%d]=", i+1,j+1);
           scanf("%lf", &m2[i][j]);
       }
   }
   
   printmatrix(m2,n);
   
    char math;
    printf("Введите операцию +, -, *: ");
    scanf(" %c", &math); //%c интерпретирует его числовое значение как символьное значение для отображения. 

    double **m3 = f(m1, m2, n, math);

    printmatrix(m3,n);
    }
    for(i=0;i<n;i++)
    {
        free(m1[i]);
    }
    for(i=0;i<n;i++)
    {
        free(m2[i]);
    }
    for(i=0;i<n;i++)
    {
        free(m3[i]);
    }
    free(m1);
    free(m2);
    free(m3);

    return 0;
}

mylib.h
double* f(double **m1, double **m2, int n, char math);

mylib.c
#include <stdlib.h>
#include "mylib.h"

double **f(double **m1, double **m2, int n, char math) 
{
    double **m3 = (double**)malloc(n * sizeof(double*));

    for(int i = 0; i < n; i++) 
    {
        m3[i]= (double*)malloc(n*sizeof(double));
    }
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++) 
        {
            if(math == '+') 
            {
                m3[i][j] = m1[i][j] + m2[i][j];
            } 
            else if(math == '-') 
            {
                m3[i][j] = m1[i][j] - m2[i][j];
            } 
            else if(math == '*') 
            {
               m3[i][j] = 0;
                for (int k = 0; k < n; k++) {
                    m3[i][j] += m1[i][k] * m2[k][j];
            }
        }
    }

    return m3;
}



ФУНКЦИЯ CREATEMATRIX:

main.c
#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"

int main() {
    int n;
    printf("Введите размерность матрицы: ");
    scanf("%d", &n);

    double** m1 = createMatrix(n);
    double** m2 = createMatrix(n);

    inputMatrix(m1, n);
    printMatrix(m1, n);

    inputMatrix(m2, n);
    printMatrix(m2, n);

    char math;
    printf("Введите операцию +, -, *: ");
    scanf(" %c", &math);

    double** m3 = f(m1, m2, n, math);

    printMatrix(m3, n);

    freeMatrix(m1, n);
    freeMatrix(m2, n);
    freeMatrix(m3, n);

    return 0;
}

mylib.h

#ifndef MYLIB_H
#define MYLIB_H

double** createMatrix(int n);
void inputMatrix(double **m, int n);
void printMatrix(double **m, int n);
void freeMatrix(double **m, int n);
double** f(double **m1, double **m2, int n, char math);

#endif

mylib.c

#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"

double** createMatrix(int n) {
    double** m = (double**)malloc(n * sizeof(double*));
    for (int i = 0; i < n; i++) {
        m[i] = (double*)malloc(n * sizeof(double));
    }
    return m;
}

void inputMatrix(double **m, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("m[%d][%d] = ", i+1, j+1);
            scanf("%lf", &m[i][j]);
        }
    }
}

void printMatrix(double **m, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%lf ", m[i][j]);
        }
        printf("\n");
    }
}

void freeMatrix(double **m, int n) {
    for (int i = 0; i < n; i++) {
        free(m[i]);
    }
    free(m);
}

double** f(double **m1, double **m2, int n, char math) {
    double** m3 = createMatrix(n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (math == '+') {
                m3[i][j] = m1[i][j] + m2[i][j];
            }
            else if (math == '-') {
                m3[i][j] = m1[i][j] - m2[i][j];
            }
            else if (math == '*') {
                m3[i][j] = m1[i][0] * m2[0][j] + m1[i][1] * m2[1][j];
            }
        }
    }
    return m3;
}


ИСПРАВЛЕННЫЙ ДВУМЕРНЫЙ МАССИВ:

main.c
#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"


int main(){
    int n;
    printf("Введите размер матрицы: ");
    scanf("%d", &n);
    
    double **m1;
    double **m2;
    int i,j;
    
    m1=(double**)malloc(n*sizeof(double*));
    for (int i=0;i<n;i++)
    {
        m1[i]=(double*)malloc(n*sizeof(double));
    }
    
    for (int i=0;i<n;i++)
    {
        for (int j=0;j<n;j++)
        {
            printf("m1[%d][%d]=",i+1,j+1);
            scanf("%lf", &m1[i][j]);
        }
    }
    
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<n;j++)
            {
                printf("%lf", m1[i][j]);
            }
            printf("\n");
        }
        
        
        m2=(double**)malloc(n*sizeof(double*));
        for (int i=0;i<n;i++)
        {
            m2[i]=(double*)malloc(n*sizeof(double));
        }
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<n;j++)
            {
                printf("m2[%d][%d]=",i+1,j+1);
                scanf("%lf", &m2[i][j]);
            }
        }
        
            for (int i=0;i<n;i++)
        {
            for (int j=0;j<n;j++)
            {
                printf("%lf", m2[i][j]);
            }
            printf("\n");
        }
        
        
        
        char math; 
        printf("Vvedite operaziu: ");
        scanf(" %c", &math);
         printf("Vvedite operaziu: %c \n", math);    
        double **m3=f(m1,m2,n,math);
        

        for (int i=0;i<n;i++)
        {
            for (int j=0;j<n;j++)
            {
                printf(" %lf ", m3[i][j]);
            }
            printf("\n");
        }
        
        for (int i=0;i<n;i++)
        {
            free(m1[i]);
        }
        for (int i=0;i<n;i++)
        {
            free(m2[i]);
        }
        for (int i=0;i<n;i++)
        {
            free(m3[i]);
        }
        free(m1);
        free(m2);
        free(m3);
    
    return 0;
}

mylib.h

double **f(double **m1, double **m2, int n, char math);

mylib.c

#include <stdlib.h>
#include <malloc.h>
#include "mylib.h"

double **f(double **m1, double **m2, int n, char math)
{
    double **m3=(double**)malloc(n*sizeof(double*));
    for (int i=0;i<n;i++)
    {
        m3[i]=(double*)malloc(n*sizeof(double));
    }
    
    for (int i=0;i<n;i++)
    {
        for (int j=0;j<n;j++)
        {
            if (math == '-')
            {
                m3[i][j]=m1[i][j]-m2[i][j];
            }
            else if (math == '+')
            {
                m3[i][j]=m1[i][j]+m2[i][j];
            }
            else if (math == '*')
            {
                m3[i][j]=0;
                for (int k=0;k<n;k++)
                {
                    m3[i][j]+=m1[i][k]*m2[j][k];
                }
            }
        }
    }
    return m3;
}
